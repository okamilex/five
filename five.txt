using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TA_5
{
    class Program
    {
        static void Main(string[] args)
        {
            new Program();
        }

        int n;
        int m;
        int p = 0;
        int cur = 0;
        int r = 0;
        bool mf = false;
        StreamReader fin = new StreamReader("input.txt");
        StreamWriter fout = new StreamWriter("output.txt");
        List<Edge> Edges = new List<Edge>();        
        List<int> ew;        
        List<long> minP;
        List<bool> isFree;
        List<int> current;
        List<List<int>> resolt;

        List<int> Grup;
        public int grup(int x)
        {
            if (Grup[x] != x)
            {
                Grup[x] = grup(Grup[x]);
            }
            return Grup[x];
        }
        public void defGrup()
        {
            Grup = new List<int>();
            for (int i = 0; i < n; i++)
            {
                Grup.Add(i);
            }
        }


        public Program()
        {
            var nm = fin.ReadLine().Split(' ').Select(s => int.Parse(s)).ToList();
            n = nm[0];
            m = nm[1];                      
            for (int i = 0; i < m; i++)
            {
                var e = fin.ReadLine().Split(' ').Select(s => int.Parse(s)).ToList();
                Edges.Add(new Edge(e[0],e[1],e[2]));                
            }
            Edges.Sort((a, b) => a.p.CompareTo(b.p));
            defGrup();
            isFree = new List<bool>();
            for (int i = 0; i < m; i++)
            {
                isFree.Add(true);
            }
            resolt = new List<List<int>>();
            ew = new List<int>();
            minP = new List<long>();            
            current = new List<int>();          



            for (int i = 0; i < m; i++)
            {
                if (grup(Edges[i].v1) != grup(Edges[i].v2))
                {
                    Grup[grup(Edges[i].v1)] = grup(Edges[i].v2);
                    
                    p += Edges[i].p;
                    ew.Add(Edges[i].p);
                    minP.Add(p);
                }
            }

            for (int i = 0; i < m; i++)
            {
                defGrup();
                if (Edges[i].p + minP[n - 3] <= p)
                {
                    rec(0, i);
                }
            }

            fout.WriteLine(r);
            for (int i = 0; i < r; i++)
            {
                for (int j = 0; j < n - 2; j++)
                    fout.Write(resolt[i][j] + " ");                
                fout.WriteLine(resolt[i][n - 2]);               
            }
            fout.Close();
        }

        


        int vp(int v, int pVP)
        {
            List<int> GrupBufVP = new List<int>(Grup);            
            for (int i = v; i < m; i++)
            {
                if (grup(Edges[i].v1) != grup(Edges[i].v2))
                {
                    pVP += Edges[i].p;
                    Grup[grup(Edges[i].v1)] = grup(Edges[i].v2);                    
                }
            }
            for (int i = 1; i < n; i++) if (grup(i) != grup(i - 1))
                {
                    pVP = 0;                    
                }
            for (int i = 0; i < n; i++) Grup[i] = GrupBufVP[i];
            return pVP;
        }

        void rec(int id, int edgeID)
        {
            if (!mf && Edges[edgeID].p < ew[id]) return;
            List<int> restore = new List<int>(Grup);            
            bool retMF = false;
            if (!mf && Edges[edgeID].p > ew[id])
            {
                mf = true;
                retMF = true;
            }
            cur += Edges[edgeID].p;
            current.Add(Edges[edgeID].n);
            Grup[grup(Edges[edgeID].v1)] = grup(Edges[edgeID].v2);            
            isFree[edgeID] = false;
            if (id == n - 2)
            {             

                List<int> curAnswer = new List<int>(current);                
                resolt.Add(curAnswer);
                r++;
                current.Remove(current.Last());
                cur -= Edges[edgeID].p;
                isFree[edgeID] = true;
                if (retMF) mf = false;
                Grup = restore;
                return;
            }
            int msW;
            for (int i = edgeID + 1; i < m; i++) if (isFree[i])
                {
                    if ((n - 4 - id >= 0 && cur + Edges[i].p + minP[n - 4 - id] > p)) break;
                    if (cur + Edges[i].p > p) break;
                    if (grup(Edges[i].v1) == grup(Edges[i].v2)) continue;
                    if (cur + Edges[i].p + minP[n - 2] - minP[id] < p) continue;
                    msW = vp(i, cur);
                    if (msW != p) break;
                    rec(id + 1, i);
                }
            current.Remove(current.Last());
            cur -= Edges[edgeID].p;
            isFree[edgeID] = true;
            if (retMF) mf = false;
            Grup = restore;
        }


        
    }
    class Edge
    {
        public static int IDCounter = 0;
        public int id;
        public int n;
        public int v1;
        public int v2;
        public int p;
        public Edge(int v1, int v2, int p)
        {
            id = IDCounter++;
            n = id + 1;
            this.v1 = v1 - 1;
            this.v2 = v2 - 1;
            this.p = p;
        }
    }
    
}
